import React, { useState, useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import GlobalStyle from "../components/GlobalStyle";
import styled from "styled-components";
import logoImg from "../assets/logo/logo1.png";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const RegisterWrapper = styled.div`
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f6f6ee;
  margin-top: 0;
  padding: 160px 0 80px 0;
`;

const RegisterContainer = styled.div`
  display: flex;
  background: #fff;
  border-radius: 24px;
  box-shadow: 0 8px 32px 0 rgba(64, 64, 64, 0.1);
  overflow: hidden;
  max-width: 800px;
  width: 100%;
  min-height: 440px;
`;

const LogoSide = styled.div`
  background: linear-gradient(
    135deg,
    rgb(250, 253, 225) 0%,
    rgb(251, 249, 239) 100%
  );
  display: flex;
  align-items: center;
  justify-content: center;
  width: 320px;
  min-width: 200px;
  padding: 32px 16px;
  @media (max-width: 700px) {
    display: none;
  }
`;

const LogoImg = styled.img`
  width: 160px;
  height: auto;
  border-radius: 20%;
  box-shadow: 0 2px 12px #b9bf9e44;
`;

const FormSide = styled.div`
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding: 48px 36px;
  background: #fff;
  @media (max-width: 700px) {
    width: 100%;
    padding: 32px 12px;
  }
`;

const RegisterForm = styled.form`
  width: 100%;
  max-width: 350px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const Title = styled.h2`
  text-align: center;
  margin-bottom: 8px;
  color: #527328;
  letter-spacing: 1px;
  font-size: 2rem;
  font-weight: 700;
`;

const Label = styled.label`
  font-weight: 500;
  color: #404040;
  margin-bottom: 4px;
`;

const Input = styled.input`
  padding: 12px 14px;
  border-radius: 10px;
  border: 1.5px solid #b9bf9e;
  font-size: 16px;
  outline: none;
  background: #f6f6ee;
  color: #404040;
  transition: border 0.2s;
  width: 100%;
  &:focus {
    border: 1.5px solid #527328;
    background: #fff;
  }
`;

const PasswordWrapper = styled.div`
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 6px;
  margin-bottom: 0;
`;

const EyeIcon = styled.span`
  position: absolute;
  right: 14px;
  top: 38px;
  cursor: pointer;
  color: #6a6649;
`;

const SubmitButton = styled.button`
  margin-top: 8px;
  padding: 12px 0;
  border-radius: 10px;
  border: none;
  background: linear-gradient(
    90deg,
    rgb(112, 146, 68) 0%,
    rgb(191, 178, 81) 100%
  );
  color: #fff;
  font-weight: 700;
  font-size: 18px;
  letter-spacing: 1px;
  cursor: pointer;
  box-shadow: 0 2px 8px #b9bf9e33;
  transition: background 0.2s;
`;

const Message = styled.div`
  color: ${({ success }) => (success ? "#527328" : "#d32f2f")};
  min-height: 24px;
  text-align: center;
  font-weight: 500;
  margin-top: 4px;
`;

const LoginPrompt = styled.div`
  text-align: center;
  margin-top: 16px;
  span {
    color: #404040;
  }
  a {
    color: #527328;
    font-weight: 600;
    text-decoration: underline;
    margin-left: 4px;
    transition: color 0.2s;
    &:hover {
      color: #6a6649;
    }
  }
`;

function Register() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [fullName, setFullName] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [message, setMessage] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [step, setStep] = useState(1); // 1: form ƒëƒÉng k√Ω, 2: nh·∫≠p OTP
  const [otp, setOtp] = useState("");
  const navigate = useNavigate();
  const [resendCooldown, setResendCooldown] = useState(0);

  useEffect(() => {
    let timer;
    if (resendCooldown > 0) {
      timer = setTimeout(() => {
        setResendCooldown((prev) => prev - 1);
      }, 1000);
    }
    return () => clearTimeout(timer);
  }, [resendCooldown]);

  const handleRegister = async (e) => {
    e.preventDefault();

    // ‚úÖ Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!email || !password || !confirmPassword || !fullName) {
      toast.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.");
      return;
    }

    const emailRegex = /^\w+([\.-]?\w+)*@[\w-]+(\.[\w-]+)+$/;
    if (!emailRegex.test(email)) {
      toast.warning("Email kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (phone && !/^0\d{9}$/.test(phone)) {
      toast.warning("S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0!");
      return;
    }

    if (password !== confirmPassword) {
      toast.warning("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }

    try {
      // ‚úÖ Check email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const checkRes = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/check-email`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email }),
        }
      );

      const checkData = await checkRes.json();

      if (checkData.exists) {
        toast.error("Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng d√πng email kh√°c.");
        return;
      }
      // ‚úÖ G·ª≠i OTP n·∫øu email h·ª£p l·ªá v√† ch∆∞a t·ªìn t·∫°i
      
      setOtp('');
      setStep(2);
      const otpRes = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/send-otp`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email }),
        }
      );
      const otpData = await otpRes.json();

      if (otpRes.ok) {
        toast.success(
          "M√£ x√°c th·ª±c ƒë√£ g·ª≠i v·ªÅ email. Vui l√≤ng nh·∫≠p ƒë·ªÉ x√°c minh."
        );
      setResendCooldown(30);
      } else {
        toast.error(otpData.message || "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP.");
      }
    } catch (err) {
      console.error("üî• L·ªói h·ªá th·ªëng:", err);
      toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
    }
  };

  const handleVerifyOtp = async () => {
    try {
      // 1. G·ª≠i m√£ OTP ƒë·ªÉ x√°c minh
      const res = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/verify-otp`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, otp }),
        }
      );
      const result = await res.json();

      if (!res.ok) {
        console.error("‚ùå X√°c minh OTP th·∫•t b·∫°i:", result);
        toast.error(result.message || "OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        return;
      }

      // 2. G·ª≠i ƒëƒÉng k√Ω
      const registerRes = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/register`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email, password, fullName, phone, address }),
        }
      );
      const regData = await registerRes.json();

      if (!registerRes.ok) {
        console.error("‚ùå ƒêƒÉng k√Ω th·∫•t b·∫°i:", regData);
        toast.error(regData.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i.");
        return;
      }

      toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...");
      setTimeout(() => navigate("/login"), 2000);
    } catch (err) {
      console.error("üî• L·ªói h·ªá th·ªëng:", err);
      toast.error("L·ªói x√°c minh ho·∫∑c ƒëƒÉng k√Ω.");
    }
  };
  const handleResendOtp = async () => {
    if (resendCooldown > 0) return; // tr√°nh spam khi countdown ƒëang ch·∫°y

    try {
      const res = await fetch(
        `${process.env.REACT_APP_BACKEND_URL}/api/send-otp`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email }),
        }
      );
      const data = await res.json();
      if (res.ok) {
        toast.success("ƒê√£ g·ª≠i l·∫°i m√£ OTP!");
        setResendCooldown(30); // b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c 60s
      } else {
        toast.error(data.message || "Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ OTP.");
      }
    } catch (err) {
      toast.error("L·ªói khi g·ª≠i l·∫°i m√£ OTP.");
      console.error(err);
    }
  };

  return (
    <>
      <GlobalStyle />
      <RegisterWrapper>
        <RegisterContainer>
          <LogoSide>
            <LogoImg src={logoImg} alt="KyoMatcha Logo" />
          </LogoSide>
          <FormSide>
            <RegisterForm
              onSubmit={
                step === 1
                  ? handleRegister
                  : (e) => {
                      e.preventDefault();
                      handleVerifyOtp();
                    }
              }
            >
              <Title>ƒêƒÉng k√Ω</Title>

              {step === 1 && (
                <>
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                  />
                  <Label htmlFor="fullName">H·ªç v√† t√™n</Label>
                  <Input
                    id="fullName"
                    type="text"
                    placeholder="H·ªç v√† t√™n"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    required
                  />
                  <PasswordWrapper>
                    <Label htmlFor="password">M·∫≠t kh·∫©u</Label>
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      required
                    />
                    <EyeIcon
                      onClick={() => setShowPassword((v) => !v)}
                      style={{ marginTop: 12 }}
                    >
                      {!showPassword ? <FaEyeSlash /> : <FaEye />}
                    </EyeIcon>
                  </PasswordWrapper>
                  <PasswordWrapper>
                    <Label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>
                    <Input
                      id="confirmPassword"
                      type={showConfirmPassword ? "text" : "password"}
                      placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      required
                    />
                    <EyeIcon
                      onClick={() => setShowConfirmPassword((v) => !v)}
                      style={{ marginTop: 12 }}
                    >
                      {!showConfirmPassword ? <FaEyeSlash /> : <FaEye />}
                    </EyeIcon>
                  </PasswordWrapper>
                  <SubmitButton type="submit">X√°c minh & ƒêƒÉng k√Ω</SubmitButton>
                </>
              )}

              {step === 2 && (
                <>
                  <Label htmlFor="otp">M√£ OTP ƒë√£ g·ª≠i t·ªõi email</Label>
                  <Input
                    id="otp"
                    type="text"
                    placeholder="Nh·∫≠p m√£ OTP"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    required
                  />

                  {/* Countdown hi·ªÉn th·ªã ngay d∆∞·ªõi input OTP */}
                  <div
                    style={{
                      textAlign: "center",
                      margin: "8px 0",
                      color: "#6A6649",
                    }}
                  >
                    {resendCooldown > 0 ? (
                      `B·∫°n c√≥ th·ªÉ g·ª≠i l·∫°i m√£ sau ${resendCooldown} gi√¢y`
                    ) : (
                      <button
                        type="button"
                        onClick={handleResendOtp}
                        style={{
                          background: "none",
                          color: "#527328",
                          border: "none",
                          cursor: "pointer",
                          fontWeight: "600",
                          marginLeft: "-65%",
                          textDecoration: "underline",
                        }}
                      >
                        G·ª≠i l·∫°i m√£ OTP
                      </button>
                    )}
                  </div>

                  <SubmitButton type="submit">X√°c minh & ƒêƒÉng k√Ω</SubmitButton>

                  <div style={{ marginTop: "12px", textAlign: "center" }}>
                    <button
                      type="button"
                      onClick={() => {setStep(1);setResendCooldown(0);setOtp('');}}
                      style={{
                        background: "none",
                        border: "none",
                        color: "#6A6649",
                        textDecoration: "underline",
                        fontWeight: "600",
                        cursor: "pointer",
                      }}
                    >
                      Quay l·∫°i ƒëƒÉng k√Ω
                    </button>
                  </div>
                </>
              )}

              <Message success={message.includes("th√†nh c√¥ng")}>
                {message}
              </Message>

              {step === 1 && (
                <LoginPrompt>
                  <span>B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?</span>
                  <Link to="/login" onClick={() => window.scrollTo(0, 0)}>
                    ƒêƒÉng nh·∫≠p
                  </Link>
                </LoginPrompt>
              )}
            </RegisterForm>
            {/* <ToastContainer position="top-center" autoClose={3000} /> */}
          </FormSide>
        </RegisterContainer>
      </RegisterWrapper>
    </>
  );
}

export default Register;
